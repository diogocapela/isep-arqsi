/* 
 * Master Data Factory (MDF) - API
 *
 * Rest API for MDF Master Data Factory
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using factory.api.client.Client;
using factory.api.client.Api;
using factory.api.client.Model;

namespace factory.api.client.Test
{
    /// <summary>
    ///  Class for testing MachineTypesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MachineTypesApiTests : IDisposable
    {
        private MachineTypesApi instance;

        public MachineTypesApiTests()
        {
            instance = new MachineTypesApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MachineTypesApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MachineTypesApi
            //Assert.IsType(typeof(MachineTypesApi), instance, "instance is a MachineTypesApi");
        }

        
        /// <summary>
        /// Test MachineTypesDelete
        /// </summary>
        [Fact]
        public void MachineTypesDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //instance.MachineTypesDelete(id);
            
        }
        
        /// <summary>
        /// Test MachineTypesGetMachineType
        /// </summary>
        [Fact]
        public void MachineTypesGetMachineTypeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.MachineTypesGetMachineType(id);
            //Assert.IsType<OutMachineTypeDTO> (response, "response is OutMachineTypeDTO");
        }
        
        /// <summary>
        /// Test MachineTypesGetMachineTypes
        /// </summary>
        [Fact]
        public void MachineTypesGetMachineTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? offset = null;
            //int? limit = null;
            //var response = instance.MachineTypesGetMachineTypes(offset, limit);
            //Assert.IsType<List<OutMachineTypeDTO>> (response, "response is List<OutMachineTypeDTO>");
        }
        
        /// <summary>
        /// Test MachineTypesPost
        /// </summary>
        [Fact]
        public void MachineTypesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InMachineTypeDTO inMachineTypeDTO = null;
            //var response = instance.MachineTypesPost(inMachineTypeDTO);
            //Assert.IsType<OutMachineTypeDTO> (response, "response is OutMachineTypeDTO");
        }
        
        /// <summary>
        /// Test MachineTypesPut
        /// </summary>
        [Fact]
        public void MachineTypesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //InMachineTypeDTO inMachineTypeDTO = null;
            //instance.MachineTypesPut(id, inMachineTypeDTO);
            
        }
        
        /// <summary>
        /// Test MachineTypesUpdateMachineTypeOperations
        /// </summary>
        [Fact]
        public void MachineTypesUpdateMachineTypeOperationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //List<int> requestBody = null;
            //instance.MachineTypesUpdateMachineTypeOperations(id, requestBody);
            
        }
        
    }

}
