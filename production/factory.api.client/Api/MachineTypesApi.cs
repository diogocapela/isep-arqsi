/* 
 * Master Data Factory (MDF) - API
 *
 * Rest API for MDF Master Data Factory
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using factory.api.client.Client;
using factory.api.client.Model;

namespace factory.api.client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMachineTypesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void MachineTypesDelete (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MachineTypesDeleteWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>OutMachineTypeDTO</returns>
        OutMachineTypeDTO MachineTypesGetMachineType (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of OutMachineTypeDTO</returns>
        ApiResponse<OutMachineTypeDTO> MachineTypesGetMachineTypeWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>List&lt;OutMachineTypeDTO&gt;</returns>
        List<OutMachineTypeDTO> MachineTypesGetMachineTypes (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;OutMachineTypeDTO&gt;</returns>
        ApiResponse<List<OutMachineTypeDTO>> MachineTypesGetMachineTypesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>OutMachineTypeDTO</returns>
        OutMachineTypeDTO MachineTypesPost (InMachineTypeDTO inMachineTypeDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>ApiResponse of OutMachineTypeDTO</returns>
        ApiResponse<OutMachineTypeDTO> MachineTypesPostWithHttpInfo (InMachineTypeDTO inMachineTypeDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns></returns>
        void MachineTypesPut (int id, InMachineTypeDTO inMachineTypeDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MachineTypesPutWithHttpInfo (int id, InMachineTypeDTO inMachineTypeDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        void MachineTypesUpdateMachineTypeOperations (int id, List<int> requestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MachineTypesUpdateMachineTypeOperationsWithHttpInfo (int id, List<int> requestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMachineTypesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MachineTypesDeleteAsync (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MachineTypesDeleteAsyncWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of OutMachineTypeDTO</returns>
        System.Threading.Tasks.Task<OutMachineTypeDTO> MachineTypesGetMachineTypeAsync (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (OutMachineTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutMachineTypeDTO>> MachineTypesGetMachineTypeAsyncWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of List&lt;OutMachineTypeDTO&gt;</returns>
        System.Threading.Tasks.Task<List<OutMachineTypeDTO>> MachineTypesGetMachineTypesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;OutMachineTypeDTO&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OutMachineTypeDTO>>> MachineTypesGetMachineTypesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of OutMachineTypeDTO</returns>
        System.Threading.Tasks.Task<OutMachineTypeDTO> MachineTypesPostAsync (InMachineTypeDTO inMachineTypeDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of ApiResponse (OutMachineTypeDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutMachineTypeDTO>> MachineTypesPostAsyncWithHttpInfo (InMachineTypeDTO inMachineTypeDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MachineTypesPutAsync (int id, InMachineTypeDTO inMachineTypeDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MachineTypesPutAsyncWithHttpInfo (int id, InMachineTypeDTO inMachineTypeDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MachineTypesUpdateMachineTypeOperationsAsync (int id, List<int> requestBody);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MachineTypesUpdateMachineTypeOperationsAsyncWithHttpInfo (int id, List<int> requestBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMachineTypesApi : IMachineTypesApiSync, IMachineTypesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MachineTypesApi : IMachineTypesApi
    {
        private factory.api.client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MachineTypesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MachineTypesApi(String basePath)
        {
            this.Configuration = factory.api.client.Client.Configuration.MergeConfigurations(
                factory.api.client.Client.GlobalConfiguration.Instance,
                new factory.api.client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MachineTypesApi(factory.api.client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = factory.api.client.Client.Configuration.MergeConfigurations(
                factory.api.client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MachineTypesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MachineTypesApi(factory.api.client.Client.ISynchronousClient client,factory.api.client.Client.IAsynchronousClient asyncClient, factory.api.client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public factory.api.client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public factory.api.client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public factory.api.client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public factory.api.client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void MachineTypesDelete (int id)
        {
             MachineTypesDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> MachineTypesDeleteWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesDelete");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete<Object>("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MachineTypesDeleteAsync (int id)
        {
             await MachineTypesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> MachineTypesDeleteAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesDelete");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>OutMachineTypeDTO</returns>
        public OutMachineTypeDTO MachineTypesGetMachineType (int id)
        {
             factory.api.client.Client.ApiResponse<OutMachineTypeDTO> localVarResponse = MachineTypesGetMachineTypeWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of OutMachineTypeDTO</returns>
        public factory.api.client.Client.ApiResponse< OutMachineTypeDTO > MachineTypesGetMachineTypeWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesGetMachineType");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< OutMachineTypeDTO >("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesGetMachineType", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of OutMachineTypeDTO</returns>
        public async System.Threading.Tasks.Task<OutMachineTypeDTO> MachineTypesGetMachineTypeAsync (int id)
        {
             factory.api.client.Client.ApiResponse<OutMachineTypeDTO> localVarResponse = await MachineTypesGetMachineTypeAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (OutMachineTypeDTO)</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<OutMachineTypeDTO>> MachineTypesGetMachineTypeAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesGetMachineType");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OutMachineTypeDTO>("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesGetMachineType", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>List&lt;OutMachineTypeDTO&gt;</returns>
        public List<OutMachineTypeDTO> MachineTypesGetMachineTypes (int? offset = null, int? limit = null)
        {
             factory.api.client.Client.ApiResponse<List<OutMachineTypeDTO>> localVarResponse = MachineTypesGetMachineTypesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of List&lt;OutMachineTypeDTO&gt;</returns>
        public factory.api.client.Client.ApiResponse< List<OutMachineTypeDTO> > MachineTypesGetMachineTypesWithHttpInfo (int? offset = null, int? limit = null)
        {
            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<OutMachineTypeDTO> >("/api/v1/machine-types", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesGetMachineTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of List&lt;OutMachineTypeDTO&gt;</returns>
        public async System.Threading.Tasks.Task<List<OutMachineTypeDTO>> MachineTypesGetMachineTypesAsync (int? offset = null, int? limit = null)
        {
             factory.api.client.Client.ApiResponse<List<OutMachineTypeDTO>> localVarResponse = await MachineTypesGetMachineTypesAsyncWithHttpInfo(offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse (List&lt;OutMachineTypeDTO&gt;)</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<List<OutMachineTypeDTO>>> MachineTypesGetMachineTypesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<OutMachineTypeDTO>>("/api/v1/machine-types", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesGetMachineTypes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>OutMachineTypeDTO</returns>
        public OutMachineTypeDTO MachineTypesPost (InMachineTypeDTO inMachineTypeDTO)
        {
             factory.api.client.Client.ApiResponse<OutMachineTypeDTO> localVarResponse = MachineTypesPostWithHttpInfo(inMachineTypeDTO);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>ApiResponse of OutMachineTypeDTO</returns>
        public factory.api.client.Client.ApiResponse< OutMachineTypeDTO > MachineTypesPostWithHttpInfo (InMachineTypeDTO inMachineTypeDTO)
        {
            // verify the required parameter 'inMachineTypeDTO' is set
            if (inMachineTypeDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inMachineTypeDTO' when calling MachineTypesApi->MachineTypesPost");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = inMachineTypeDTO;


            // make the HTTP request

            var response = this.Client.Post< OutMachineTypeDTO >("/api/v1/machine-types", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of OutMachineTypeDTO</returns>
        public async System.Threading.Tasks.Task<OutMachineTypeDTO> MachineTypesPostAsync (InMachineTypeDTO inMachineTypeDTO)
        {
             factory.api.client.Client.ApiResponse<OutMachineTypeDTO> localVarResponse = await MachineTypesPostAsyncWithHttpInfo(inMachineTypeDTO);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of ApiResponse (OutMachineTypeDTO)</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<OutMachineTypeDTO>> MachineTypesPostAsyncWithHttpInfo (InMachineTypeDTO inMachineTypeDTO)
        {
            // verify the required parameter 'inMachineTypeDTO' is set
            if (inMachineTypeDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inMachineTypeDTO' when calling MachineTypesApi->MachineTypesPost");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = inMachineTypeDTO;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OutMachineTypeDTO>("/api/v1/machine-types", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns></returns>
        public void MachineTypesPut (int id, InMachineTypeDTO inMachineTypeDTO)
        {
             MachineTypesPutWithHttpInfo(id, inMachineTypeDTO);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> MachineTypesPutWithHttpInfo (int id, InMachineTypeDTO inMachineTypeDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesPut");

            // verify the required parameter 'inMachineTypeDTO' is set
            if (inMachineTypeDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inMachineTypeDTO' when calling MachineTypesApi->MachineTypesPut");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = inMachineTypeDTO;


            // make the HTTP request

            var response = this.Client.Put<Object>("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MachineTypesPutAsync (int id, InMachineTypeDTO inMachineTypeDTO)
        {
             await MachineTypesPutAsyncWithHttpInfo(id, inMachineTypeDTO);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inMachineTypeDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> MachineTypesPutAsyncWithHttpInfo (int id, InMachineTypeDTO inMachineTypeDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesPut");

            // verify the required parameter 'inMachineTypeDTO' is set
            if (inMachineTypeDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inMachineTypeDTO' when calling MachineTypesApi->MachineTypesPut");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = inMachineTypeDTO;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/v1/machine-types/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns></returns>
        public void MachineTypesUpdateMachineTypeOperations (int id, List<int> requestBody)
        {
             MachineTypesUpdateMachineTypeOperationsWithHttpInfo(id, requestBody);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> MachineTypesUpdateMachineTypeOperationsWithHttpInfo (int id, List<int> requestBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesUpdateMachineTypeOperations");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'requestBody' when calling MachineTypesApi->MachineTypesUpdateMachineTypeOperations");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;


            // make the HTTP request

            var response = this.Client.Put<Object>("/api/v1/machine-types/{id}/operations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesUpdateMachineTypeOperations", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MachineTypesUpdateMachineTypeOperationsAsync (int id, List<int> requestBody)
        {
             await MachineTypesUpdateMachineTypeOperationsAsyncWithHttpInfo(id, requestBody);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="requestBody"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> MachineTypesUpdateMachineTypeOperationsAsyncWithHttpInfo (int id, List<int> requestBody)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling MachineTypesApi->MachineTypesUpdateMachineTypeOperations");

            // verify the required parameter 'requestBody' is set
            if (requestBody == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'requestBody' when calling MachineTypesApi->MachineTypesUpdateMachineTypeOperations");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = requestBody;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/v1/machine-types/{id}/operations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MachineTypesUpdateMachineTypeOperations", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
