/* 
 * Master Data Factory (MDF) - API
 *
 * Rest API for MDF Master Data Factory
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using factory.api.client.Client;
using factory.api.client.Model;

namespace factory.api.client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductionLinesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ProductionLinesDelete (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductionLinesDeleteWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void ProductionLinesGetProductionLine (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductionLinesGetProductionLineWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns></returns>
        void ProductionLinesGetProductionLines (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductionLinesGetProductionLinesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns></returns>
        void ProductionLinesPost (InProductionLineDTO inProductionLineDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductionLinesPostWithHttpInfo (InProductionLineDTO inProductionLineDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns></returns>
        void ProductionLinesPut (int id, InProductionLineDTO inProductionLineDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ProductionLinesPutWithHttpInfo (int id, InProductionLineDTO inProductionLineDTO);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductionLinesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductionLinesDeleteAsync (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductionLinesDeleteAsyncWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductionLinesGetProductionLineAsync (int id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductionLinesGetProductionLineAsyncWithHttpInfo (int id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductionLinesGetProductionLinesAsync (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductionLinesGetProductionLinesAsyncWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductionLinesPostAsync (InProductionLineDTO inProductionLineDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductionLinesPostAsyncWithHttpInfo (InProductionLineDTO inProductionLineDTO);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ProductionLinesPutAsync (int id, InProductionLineDTO inProductionLineDTO);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProductionLinesPutAsyncWithHttpInfo (int id, InProductionLineDTO inProductionLineDTO);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProductionLinesApi : IProductionLinesApiSync, IProductionLinesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProductionLinesApi : IProductionLinesApi
    {
        private factory.api.client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionLinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductionLinesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionLinesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProductionLinesApi(String basePath)
        {
            this.Configuration = factory.api.client.Client.Configuration.MergeConfigurations(
                factory.api.client.Client.GlobalConfiguration.Instance,
                new factory.api.client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionLinesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProductionLinesApi(factory.api.client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = factory.api.client.Client.Configuration.MergeConfigurations(
                factory.api.client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new factory.api.client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProductionLinesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProductionLinesApi(factory.api.client.Client.ISynchronousClient client,factory.api.client.Client.IAsynchronousClient asyncClient, factory.api.client.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = factory.api.client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public factory.api.client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public factory.api.client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public factory.api.client.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public factory.api.client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ProductionLinesDelete (int id)
        {
             ProductionLinesDeleteWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> ProductionLinesDeleteWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesDelete");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductionLinesDeleteAsync (int id)
        {
             await ProductionLinesDeleteAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> ProductionLinesDeleteAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesDelete");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void ProductionLinesGetProductionLine (int id)
        {
             ProductionLinesGetProductionLineWithHttpInfo(id);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> ProductionLinesGetProductionLineWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesGetProductionLine");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesGetProductionLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductionLinesGetProductionLineAsync (int id)
        {
             await ProductionLinesGetProductionLineAsyncWithHttpInfo(id);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> ProductionLinesGetProductionLineAsyncWithHttpInfo (int id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesGetProductionLine");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesGetProductionLine", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns></returns>
        public void ProductionLinesGetProductionLines (int? offset = null, int? limit = null)
        {
             ProductionLinesGetProductionLinesWithHttpInfo(offset, limit);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> ProductionLinesGetProductionLinesWithHttpInfo (int? offset = null, int? limit = null)
        {
            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (offset != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get<Object>("/api/v1/production-lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesGetProductionLines", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductionLinesGetProductionLinesAsync (int? offset = null, int? limit = null)
        {
             await ProductionLinesGetProductionLinesAsyncWithHttpInfo(offset, limit);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset"> (optional, default to 0)</param>
        /// <param name="limit"> (optional, default to 50)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> ProductionLinesGetProductionLinesAsyncWithHttpInfo (int? offset = null, int? limit = null)
        {

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (offset != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in factory.api.client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/api/v1/production-lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesGetProductionLines", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns></returns>
        public void ProductionLinesPost (InProductionLineDTO inProductionLineDTO)
        {
             ProductionLinesPostWithHttpInfo(inProductionLineDTO);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> ProductionLinesPostWithHttpInfo (InProductionLineDTO inProductionLineDTO)
        {
            // verify the required parameter 'inProductionLineDTO' is set
            if (inProductionLineDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inProductionLineDTO' when calling ProductionLinesApi->ProductionLinesPost");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = inProductionLineDTO;


            // make the HTTP request

            var response = this.Client.Post<Object>("/api/v1/production-lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductionLinesPostAsync (InProductionLineDTO inProductionLineDTO)
        {
             await ProductionLinesPostAsyncWithHttpInfo(inProductionLineDTO);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> ProductionLinesPostAsyncWithHttpInfo (InProductionLineDTO inProductionLineDTO)
        {
            // verify the required parameter 'inProductionLineDTO' is set
            if (inProductionLineDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inProductionLineDTO' when calling ProductionLinesApi->ProductionLinesPost");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = inProductionLineDTO;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/api/v1/production-lines", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns></returns>
        public void ProductionLinesPut (int id, InProductionLineDTO inProductionLineDTO)
        {
             ProductionLinesPutWithHttpInfo(id, inProductionLineDTO);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public factory.api.client.Client.ApiResponse<Object> ProductionLinesPutWithHttpInfo (int id, InProductionLineDTO inProductionLineDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesPut");

            // verify the required parameter 'inProductionLineDTO' is set
            if (inProductionLineDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inProductionLineDTO' when calling ProductionLinesApi->ProductionLinesPut");

            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = factory.api.client.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = factory.api.client.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = inProductionLineDTO;


            // make the HTTP request

            var response = this.Client.Put<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ProductionLinesPutAsync (int id, InProductionLineDTO inProductionLineDTO)
        {
             await ProductionLinesPutAsyncWithHttpInfo(id, inProductionLineDTO);

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="factory.api.client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="inProductionLineDTO"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<factory.api.client.Client.ApiResponse<Object>> ProductionLinesPutAsyncWithHttpInfo (int id, InProductionLineDTO inProductionLineDTO)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'id' when calling ProductionLinesApi->ProductionLinesPut");

            // verify the required parameter 'inProductionLineDTO' is set
            if (inProductionLineDTO == null)
                throw new factory.api.client.Client.ApiException(400, "Missing required parameter 'inProductionLineDTO' when calling ProductionLinesApi->ProductionLinesPut");


            factory.api.client.Client.RequestOptions requestOptions = new factory.api.client.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (id != null)
                requestOptions.PathParameters.Add("id", factory.api.client.Client.ClientUtils.ParameterToString(id)); // path parameter
            requestOptions.Data = inProductionLineDTO;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Object>("/api/v1/production-lines/{id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ProductionLinesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
